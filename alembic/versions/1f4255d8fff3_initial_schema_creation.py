"""Initial schema creation

Revision ID: 1f4255d8fff3
Revises: 
Create Date: 2024-07-19 13:33:14.571081

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from pgvector.sqlalchemy import Vector


from sqlalchemy.schema import CreateTable, DropTable
from sqlalchemy.ext.compiler import compiles
import re


@compiles(CreateTable)
def _add_if_not_exists(element, compiler, **kw):
    output = compiler.visit_create_table(element, **kw)
    if element.element.info.get("ifexists"):
        output = re.sub(
            "^\s*CREATE TABLE", "CREATE TABLE IF NOT EXISTS", output, re.S)
    return output


@compiles(DropTable)
def _add_if_exists(element, compiler, **kw):
    output = compiler.visit_drop_table(element, **kw)
    if element.element.info.get("ifexists"):
        output = re.sub(
            "^\s*DROP TABLE", "DROP TABLE IF EXISTS", output, re.S)
    return output


# revision identifiers, used by Alembic.
revision: str = '1f4255d8fff3'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(sa.sql.text("CREATE EXTENSION IF NOT EXISTS vector;"))
    op.create_table('langchain_pg_collection',
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('cmetadata', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('uuid', sa.UUID(), nullable=False),
    sa.PrimaryKeyConstraint('uuid'),
    info={"ifexists": True}
    )
    op.create_table('langchain_pg_embedding',
    sa.Column('collection_id', sa.UUID(), nullable=True),
    sa.Column('doc_id', sa.Integer(), nullable=False),
    sa.Column('lang', sa.String(), nullable=False),
    sa.Column('embedding', Vector(dim=1536), nullable=True),
    sa.Column('embedding_hnsw', Vector(dim=1536), nullable=True),
    sa.Column('document', sa.String(), nullable=True),
    sa.Column('cmetadata', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('custom_id', sa.String(), nullable=True),
    sa.Column('uuid', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['collection_id'], ['langchain_pg_collection.uuid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uuid'),
    info={"ifexists": True}
    )
    # op.drop_table('alembic_version')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # op.create_table('alembic_version',
    # sa.Column('version_num', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    # sa.PrimaryKeyConstraint('version_num', name='alembic_version_pkc')
    # )
    op.drop_table('langchain_pg_embedding')
    op.drop_table('langchain_pg_collection')
    # op.execute(sa.sql.text("DROP EXTENSION IF EXISTS vector;"))
    # ### end Alembic commands ###
