"""add indexes to embedding table

Revision ID: 9c01a3eea1b9
Revises: 1f4255d8fff3
Create Date: 2024-07-19 14:39:12.391951

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


from sqlalchemy.schema import CreateIndex, DropIndex
from sqlalchemy.ext.compiler import compiles
import re


# @compiles(CreateIndex)
# def _add_if_not_exists(element, compiler, **kw):
#     output = compiler.visit_create_index(element, **kw)
#     if element.element.info.get("ifexists"):
#         output = re.sub(
#             "^\s*CREATE TABLE", "CREATE INDEX IF NOT EXISTS", output, re.S)
#     return output


# @compiles(DropIndex)
# def _add_if_exists(element, compiler, **kw):
#     output = compiler.visit_drop_index(element, **kw)
#     if element.element.info.get("ifexists"):
#         output = re.sub(
#             "^\s*DROP INDEX", "DROP INDEX IF EXISTS", output, re.S)
#     return output

# revision identifiers, used by Alembic.
revision: str = '9c01a3eea1b9'
down_revision: Union[str, None] = '1f4255d8fff3'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None



def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_table('alembic_version')
    op.create_index('idx_composite_docid_lang', 'langchain_pg_embedding', ["doc_id", "lang"], unique=False,  postgresql_using="btree",if_not_exists=True)
    op.create_index('idx_hnsw', 'langchain_pg_embedding', ['embedding_hnsw'], unique=False, postgresql_ops={'embedding_hnsw': 'vector_cosine_ops'}, postgresql_with={'m': '16', 'ef_construction': '128'}, postgresql_using='hnsw',if_not_exists=True)

    # op.create_index(sa.Index('idx_composite_docid_lang', "embedding_hnsw", postgresql_ops={'embedding_hnsw': 'vector_cosine_ops'}, postgresql_with={'m': 16, 'ef_construction': 128},postgresql_using="hnsw"))
    # ### end Alembic commands ###
    # sa.Index('idx_composite_docid_lang', "doc_id", "lang", postgresql_using="btree"), 
    # sa.Index('idx_composite_docid_lang', "embedding_hnsw", postgresql_ops={'embedding_hnsw': 'vector_cosine_ops'}, postgresql_with={'m': 16, 'ef_construction': 128},postgresql_using="hnsw"),

def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_hnsw', table_name='langchain_pg_embedding',if_exists=True)
    op.drop_index('idx_composite_docid_lang', table_name='langchain_pg_embedding',if_exists=True)

    # op.create_table('alembic_version',
    # sa.Column('version_num', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    # sa.PrimaryKeyConstraint('version_num', name='alembic_version_pkc')
    # )
    # ### end Alembic commands ###
