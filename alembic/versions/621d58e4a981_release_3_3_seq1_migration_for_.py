"""release 3.3 seq1 migration for multitenancy

Revision ID: 621d58e4a981
Revises: 60831ec639b4
Create Date: 2025-02-25 17:02:34.760382

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '621d58e4a981'
down_revision: Union[str, None] = '60831ec639b4'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    # conn.execution_options()
    # database_name = conn.execute(sa.sql.text("SELECT current_database()"))
    # database_name = database_name.fetchall()[0]
    number_of_docs = conn.execute(sa.sql.text("SELECT ceil(COUNT(*)::float/1000) from langchain_pg_document;"))
    number_of_docs = number_of_docs.fetchall()[0]
    number_of_chunks = conn.execute(sa.sql.text("SELECT ceil(COUNT(*)::float/1000) from langchain_pg_embedding;"))
    number_of_chunks = number_of_chunks.fetchall()[0]
    # role_exists = conn.execute(sa.sql.text("SELECT FROM pg_catalog.pg_roles WHERE  rolname = 'partman_user'"))
    print(number_of_docs,number_of_chunks)
    op.execute("""LOCK TABLE public.langchain_pg_collection IN ACCESS EXCLUSIVE MODE;
        LOCK TABLE public.langchain_pg_document IN ACCESS EXCLUSIVE MODE;
        LOCK TABLE public.langchain_pg_embedding IN ACCESS EXCLUSIVE MODE;
        LOCK TABLE public.langchain_pg_web IN ACCESS EXCLUSIVE MODE;""")
    
    op.execute("""ALTER TABLE public.LANGCHAIN_PG_COLLECTION
    ADD COLUMN COLLECTION_ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (
    INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1
    );""")
    op.execute("""ALTER TABLE public.langchain_pg_document ADD COLUMN COLLECTION_ID_INT INTEGER;""")
    op.execute("""ALTER TABLE public.langchain_pg_web ADD COLUMN COLLECTION_ID_INT INTEGER;""")
    op.execute("""ALTER TABLE public.langchain_pg_embedding ADD COLUMN COLLECTION_ID INTEGER;""")

    op.execute("""ALTER TABLE IF EXISTS langchain_pg_embedding DROP CONSTRAINT langchain_pg_embedding_doc_id_fkey;""")
    op.execute("""ALTER TABLE IF EXISTS public.langchain_pg_document DROP CONSTRAINT langchain_pg_document_collection_id_fkey;""")
    op.execute("""ALTER TABLE IF EXISTS public.langchain_pg_web DROP CONSTRAINT langchain_pg_web_collection_id_fkey;""")
    op.execute("""ALTER TABLE IF EXISTS public.LANGCHAIN_PG_COLLECTION DROP CONSTRAINT langchain_pg_collection_pkey;""")
    op.execute("""ALTER TABLE IF EXISTS langchain_pg_embedding DROP CONSTRAINT langchain_pg_embedding_pkey;""")
    op.execute("""ALTER TABLE IF EXISTS langchain_pg_document DROP CONSTRAINT langchain_pg_document_pkey;""")

    op.execute("""DROP INDEX IF EXISTS public.idx_adv_srch_kwvector_fts;""")
    op.execute("""DROP INDEX IF EXISTS public.idx_chat_kwvector_fts;""")
    op.execute("""DROP INDEX IF EXISTS public.idx_composite_docid_lang;""")
    op.execute("""DROP INDEX IF EXISTS public.idx_hnsw;""")

    op.execute("""UPDATE public.langchain_pg_document d set COLLECTION_ID_INT = c.COLLECTION_ID
    from public.LANGCHAIN_PG_COLLECTION c
    where c.uuid = d.collection_id;""")

    op.execute("""UPDATE public.langchain_pg_web w set COLLECTION_ID_INT = c.COLLECTION_ID
    from public.LANGCHAIN_PG_COLLECTION c
    where c.uuid = w.collection_id;""")

    op.execute("""UPDATE public.langchain_pg_embedding e set COLLECTION_ID = d.COLLECTION_ID_INT
    from public.langchain_pg_document d
    where d.id=e.doc_id;""")


    op.execute("""ALTER TABLE IF EXISTS public.LANGCHAIN_PG_COLLECTION
    DROP COLUMN uuid;""")

    op.execute("""ALTER TABLE IF EXISTS public.langchain_pg_document
        ALTER COLUMN id DROP DEFAULT;""")
    


    op.execute("""ALTER TABLE IF EXISTS public.langchain_pg_document
    DROP COLUMN collection_id;""")
    op.execute("""ALTER TABLE IF EXISTS public.langchain_pg_document
    RENAME COLUMN collection_id_int TO collection_id;""")


    op.execute("""ALTER TABLE IF EXISTS public.langchain_pg_web
    DROP COLUMN collection_id;""")
    op.execute("""ALTER TABLE IF EXISTS public.langchain_pg_web
    RENAME COLUMN collection_id_int TO collection_id;""")
    

    op.execute("""DROP FUNCTION IF EXISTS public.semantic_hnsw_nolang(vector, integer, uuid, integer[]);""")
    op.execute("""CREATE OR REPLACE FUNCTION public.semantic_hnsw_nolang(
    query_language_vector vector,
    num_chunks_to_return integer,
    collectin_id integer,
    VARIADIC query_files integer[])
        RETURNS TABLE(langchain_pg_embedding_embedding vector, langchain_pg_embedding_document character varying, langchain_pg_embedding_cmetadata json, langchain_pg_embedding_page character varying, langchain_pg_embedding_uuid uuid, langchain_pg_embedding_doc_id integer, langchain_pg_embedding_lang character varying, chunk_num integer, chunk_len_in_chars integer, document_summary character varying, document_name character varying, distance double precision, encrypted character varying) 
        LANGUAGE 'plpgsql'
        COST 100
        VOLATILE PARALLEL UNSAFE
        ROWS 1000

    AS $BODY$
                                                                                                    
    <<first_block>>
    declare

    begin
    raise notice 'Inside approximate search nolang';
    RETURN QUERY SELECT
    e.embedding AS langchain_pg_embedding_embedding,
    e.document AS langchain_pg_embedding_document,
    e.jmeta AS langchain_pg_embedding_cmetadata,
    e.page AS langchain_pg_embedding_page,
    e.uuid AS langchain_pg_embedding_uuid,
    e.doc_id AS langchain_pg_embedding_doc_id,
    e.lang AS langchain_pg_embedding_lang,
    e.chunk_num AS chunk_num,
    e.chunk_len_in_chars AS chunk_len_in_chars,
    d.document_summary AS document_summary,
    d.name as document_name,
    e.embedding_hnsw <=> query_language_vector as distance,
    d.encrypted
    
    FROM
    langchain_pg_embedding e
    join langchain_pg_document d on d.id = e.doc_id
    WHERE
    e.doc_id = ANY (query_files)
    and d.collection_id = collectin_id
    ORDER BY
    distance ASC
    LIMIT num_chunks_to_return
    ;
    end first_block 

                    
    $BODY$;""")


    op.execute("""DROP FUNCTION IF EXISTS public.semantic_hnsw_otherlangs(character varying, vector, integer, uuid, integer[]);""")
    op.execute("""CREATE OR REPLACE FUNCTION public.semantic_hnsw_otherlangs(
    exclude_language character varying,
    query_language_vector vector,
    num_chunks_to_return integer,
    collectin_id integer,
    VARIADIC query_files integer[])
        RETURNS TABLE(langchain_pg_embedding_embedding vector, langchain_pg_embedding_document character varying, langchain_pg_embedding_cmetadata json, langchain_pg_embedding_page character varying, langchain_pg_embedding_uuid uuid, langchain_pg_embedding_doc_id integer, langchain_pg_embedding_lang character varying, chunk_num integer, chunk_len_in_chars integer, document_summary character varying, document_name character varying, distance double precision, encrypted character varying) 
        LANGUAGE 'plpgsql'
        COST 100
        VOLATILE PARALLEL UNSAFE
        ROWS 1000

    AS $BODY$
                                                                                                    
    <<first_block>>
    declare

    begin
    raise notice 'Inside approximate search otherlangs';
    RETURN QUERY SELECT
    e.embedding AS langchain_pg_embedding_embedding,
    e.document AS langchain_pg_embedding_document,
    e.jmeta AS langchain_pg_embedding_cmetadata,
    e.page AS langchain_pg_embedding_page,
    e.uuid AS langchain_pg_embedding_uuid,
    e.doc_id AS langchain_pg_embedding_doc_id,
    e.lang AS langchain_pg_embedding_lang,
    e.chunk_num AS chunk_num,
    e.chunk_len_in_chars AS chunk_len_in_chars,
    d.document_summary AS document_summary,
    d.name as document_name,
    e.embedding_hnsw <=> query_language_vector as distance,
    d.encrypted
    
    FROM
    langchain_pg_embedding e
    join langchain_pg_document d on d.id = e.doc_id
    WHERE
    e.doc_id = ANY (query_files)
    and e.lang <> exclude_language
    and d.collection_id = collectin_id
    ORDER BY
    distance ASC
    LIMIT num_chunks_to_return
    ;
    end first_block 
                                
                
    $BODY$;""")




    op.execute("""DROP FUNCTION IF EXISTS public.semantic_hnsw_singlelang(character varying, vector, integer, uuid, integer[]);""")
    op.execute("""CREATE OR REPLACE FUNCTION public.semantic_hnsw_singlelang(
    search_language character varying,
    query_language_vector vector,
    num_chunks_to_return integer,
    collectin_id integer,
    VARIADIC query_files integer[])
        RETURNS TABLE(langchain_pg_embedding_embedding vector, langchain_pg_embedding_document character varying, langchain_pg_embedding_cmetadata json, langchain_pg_embedding_page character varying, langchain_pg_embedding_uuid uuid, langchain_pg_embedding_doc_id integer, langchain_pg_embedding_lang character varying, chunk_num integer, chunk_len_in_chars integer, document_summary character varying, document_name character varying, distance double precision, encrypted character varying) 
        LANGUAGE 'plpgsql'
        COST 100
        VOLATILE PARALLEL UNSAFE
        ROWS 1000

    AS $BODY$
                                                                                                    
    <<first_block>>
    declare

    begin
    raise notice 'Inside approximate search singlelang';
    RETURN QUERY SELECT
    e.embedding AS langchain_pg_embedding_embedding,
    e.document AS langchain_pg_embedding_document,
    e.jmeta AS langchain_pg_embedding_cmetadata,
    e.page AS langchain_pg_embedding_page,
    e.uuid AS langchain_pg_embedding_uuid,
    e.doc_id AS langchain_pg_embedding_doc_id,
    e.lang AS langchain_pg_embedding_lang,
    e.chunk_num AS chunk_num,
    e.chunk_len_in_chars AS chunk_len_in_chars,
    
    d.document_summary AS document_summary,
    d.name as document_name,
    e.embedding_hnsw <=> query_language_vector as distance,
    d.encrypted
    
    FROM
    langchain_pg_embedding e
    join langchain_pg_document d on d.id = e.doc_id
    WHERE
    e.doc_id = ANY (query_files)
    and e.lang = search_language
    and d.collection_id = collectin_id
    ORDER BY
    distance ASC
    LIMIT num_chunks_to_return
    ;
    end first_block 
                                
                
    $BODY$;""")



    op.execute("""DROP FUNCTION IF EXISTS public.semantic_nohnsw_nolang(vector, integer, uuid, integer[]);""")
    op.execute("""CREATE OR REPLACE FUNCTION public.semantic_nohnsw_nolang(
    query_language_vector vector,
    num_chunks_to_return integer,
    collectin_id integer,
    VARIADIC query_files integer[])
        RETURNS TABLE(langchain_pg_embedding_embedding vector, langchain_pg_embedding_document character varying, langchain_pg_embedding_cmetadata json, langchain_pg_embedding_page character varying, langchain_pg_embedding_uuid uuid, langchain_pg_embedding_doc_id integer, langchain_pg_embedding_lang character varying, chunk_num integer, chunk_len_in_chars integer, document_summary character varying, document_name character varying, distance double precision, encrypted character varying) 
        LANGUAGE 'plpgsql'
        COST 100
        VOLATILE PARALLEL UNSAFE
        ROWS 1000

    AS $BODY$
                                                                                                    
    <<first_block>>
    declare

    begin
    raise notice 'Inside exact search nolang';
    RETURN QUERY SELECT
    e.embedding AS langchain_pg_embedding_embedding,
    e.document AS langchain_pg_embedding_document,
    e.jmeta AS langchain_pg_embedding_cmetadata,
    e.page AS langchain_pg_embedding_page,
    e.uuid AS langchain_pg_embedding_uuid,
    e.doc_id AS langchain_pg_embedding_doc_id,
    e.lang AS langchain_pg_embedding_lang,
    e.chunk_num AS chunk_num,
    e.chunk_len_in_chars AS chunk_len_in_chars,
    
    d.document_summary AS document_summary,
    d.name as document_name,
    e.embedding <=> query_language_vector as distance,
    d.encrypted
    
    FROM
    langchain_pg_embedding e
    join langchain_pg_document d on d.id = e.doc_id
    WHERE
    e.doc_id = ANY (query_files)
    and d.collection_id = collectin_id
    ORDER BY
    distance ASC
    LIMIT num_chunks_to_return
    ;
    end first_block 
                                
                
    $BODY$;""")



    op.execute("""DROP FUNCTION IF EXISTS public.semantic_nohnsw_otherlangs(character varying, vector, integer, uuid, integer[]);""")
    op.execute("""CREATE OR REPLACE FUNCTION public.semantic_nohnsw_otherlangs(
    exclude_language character varying,
    query_language_vector vector,
    num_chunks_to_return integer,
    collectin_id integer,
    VARIADIC query_files integer[])
        RETURNS TABLE(langchain_pg_embedding_embedding vector, langchain_pg_embedding_document character varying, langchain_pg_embedding_cmetadata json, langchain_pg_embedding_page character varying, langchain_pg_embedding_uuid uuid, langchain_pg_embedding_doc_id integer, langchain_pg_embedding_lang character varying, chunk_num integer, chunk_len_in_chars integer, document_summary character varying, document_name character varying, distance double precision, encrypted character varying) 
        LANGUAGE 'plpgsql'
        COST 100
        VOLATILE PARALLEL UNSAFE
        ROWS 1000

    AS $BODY$
                                                                                                    
    <<first_block>>
    declare

    begin
    raise notice 'Inside exact search otherlangs';
    RETURN QUERY SELECT
    e.embedding AS langchain_pg_embedding_embedding,
    e.document AS langchain_pg_embedding_document,
    e.jmeta AS langchain_pg_embedding_cmetadata,
    e.page AS langchain_pg_embedding_page,
    e.uuid AS langchain_pg_embedding_uuid,
    e.doc_id AS langchain_pg_embedding_doc_id,
    e.lang AS langchain_pg_embedding_lang,
    e.chunk_num AS chunk_num,
    e.chunk_len_in_chars AS chunk_len_in_chars,
    
    d.document_summary AS document_summary,
    d.name as document_name,
    e.embedding <=> query_language_vector as distance,
    d.encrypted
    
    FROM
    langchain_pg_embedding e
    join langchain_pg_document d on d.id = e.doc_id 
    WHERE
    e.doc_id = ANY (query_files)
    and e.lang <> exclude_language
    and d.collection_id = collectin_id
    ORDER BY
    distance ASC
    LIMIT num_chunks_to_return
    ;
    end first_block 
                                
                
    $BODY$;""")



    op.execute("""DROP FUNCTION IF EXISTS public.semantic_nohnsw_singlelang(character varying, vector, integer, uuid, integer[]);""")
    op.execute("""CREATE OR REPLACE FUNCTION public.semantic_nohnsw_singlelang(
    search_language character varying,
    query_language_vector vector,
    num_chunks_to_return integer,
    collectin_id integer,
    VARIADIC query_files integer[])
        RETURNS TABLE(langchain_pg_embedding_embedding vector, langchain_pg_embedding_document character varying, langchain_pg_embedding_cmetadata json, langchain_pg_embedding_page character varying, langchain_pg_embedding_uuid uuid, langchain_pg_embedding_doc_id integer, langchain_pg_embedding_lang character varying, chunk_num integer, chunk_len_in_chars integer, document_summary character varying, document_name character varying, distance double precision, encrypted character varying) 
        LANGUAGE 'plpgsql'
        COST 100
        VOLATILE PARALLEL UNSAFE
        ROWS 1000

    AS $BODY$
                                                                                                    
    <<first_block>>
    declare

    begin
    raise notice 'Inside exact search singlelang';
    RETURN QUERY SELECT
    e.embedding AS langchain_pg_embedding_embedding,
    e.document AS langchain_pg_embedding_document,
    e.jmeta AS langchain_pg_embedding_cmetadata,
    e.page AS langchain_pg_embedding_page,
    e.uuid AS langchain_pg_embedding_uuid,
    e.doc_id AS langchain_pg_embedding_doc_id,
    e.lang AS langchain_pg_embedding_lang,
    e.chunk_num AS chunk_num,
    e.chunk_len_in_chars AS chunk_len_in_chars,
    
    d.document_summary AS document_summary,
    d.name as document_name,
    e.embedding <=> query_language_vector as distance,
    d.encrypted
    
    FROM
    langchain_pg_embedding e 
    join langchain_pg_document d on d.id = e.doc_id
    WHERE
    e.doc_id = ANY (query_files)
    and e.lang = search_language
    and d.collection_id = collectin_id
    ORDER BY
    distance ASC
    LIMIT num_chunks_to_return
    ;
    end first_block 
                                
                
    $BODY$;""")


    op.execute("""DROP FUNCTION IF EXISTS public.semantic_nolang(vector, integer, uuid, integer[]);""")
    op.execute("""CREATE OR REPLACE FUNCTION public.semantic_nolang(
    query_language_vector vector,
    num_chunks_to_return integer,
    collectin_id integer,
    VARIADIC query_files integer[])
        RETURNS TABLE(langchain_pg_embedding_embedding vector, langchain_pg_embedding_document character varying, langchain_pg_embedding_cmetadata json, langchain_pg_embedding_page character varying, langchain_pg_embedding_uuid uuid, langchain_pg_embedding_doc_id integer, langchain_pg_embedding_lang character varying, chunk_num integer, chunk_len_in_chars integer, document_summary character varying, document_name character varying, distance double precision, encrypted character varying, original_format character varying, format character varying, previous_chunk character varying, previous_chunk_jmeta json, next_chunk character varying, next_chunk_jmeta json, author character varying) 
        LANGUAGE 'plpgsql'
        COST 100
        VOLATILE PARALLEL UNSAFE
        ROWS 1000

    AS $BODY$
                                                                                                    
    <<first_block>>
    declare
        doc_count integer := 0;
        hnsw_threshold constant integer := 70000;
    begin
        raise notice 'Inside nolang';
        
        select count(*) 
        into doc_count
        from public.langchain_pg_embedding e
        join public.langchain_pg_document d
        on e.doc_id = d.id
        where d.collection_id = collectin_id
        and e.doc_id = ANY (query_files);
        
        raise notice 'The number of document is %', doc_count;
        
        if doc_count<hnsw_threshold then
            RETURN QUERY 
        SELECT MAIN.*,DOC_TBL.original_format, DOC_TBL.format, COALESCE(PREVIOUS_CHUNK_TBL.document,'') as previous_chunk, COALESCE(PREVIOUS_CHUNK_TBL.jmeta, '{}')::json as previous_chunk_json, COALESCE(NEXT_CHUNK_TBL.document,'') as next_chunk, COALESCE(NEXT_CHUNK_TBL.jmeta,'{}')::json as next_chunk_json, COALESCE(DOC_TBL.author,'Unknown') as author FROM 
        (SELECT * from semantic_nohnsw_nolang(query_language_vector, num_chunks_to_return,collectin_id, variadic query_files)) as MAIN
        LEFT OUTER JOIN
        langchain_pg_embedding as PREVIOUS_CHUNK_TBL
        ON MAIN.langchain_pg_embedding_doc_id = PREVIOUS_CHUNK_TBL.doc_id
        AND MAIN.chunk_num-1 = PREVIOUS_CHUNK_TBL.chunk_num
        LEFT OUTER JOIN
        langchain_pg_embedding as NEXT_CHUNK_TBL
        ON MAIN.langchain_pg_embedding_doc_id = NEXT_CHUNK_TBL.doc_id
        AND MAIN.chunk_num+1 = NEXT_CHUNK_TBL.chunk_num
        INNER JOIN
        langchain_pg_document as DOC_TBL
        ON MAIN.langchain_pg_embedding_doc_id = DOC_TBL.id
            ;
        else
            RETURN QUERY 
        SELECT MAIN.*,DOC_TBL.original_format, DOC_TBL.format, COALESCE(PREVIOUS_CHUNK_TBL.document,'') as previous_chunk, COALESCE(PREVIOUS_CHUNK_TBL.jmeta, '{}')::json as previous_chunk_json, COALESCE(NEXT_CHUNK_TBL.document,'') as next_chunk, COALESCE(NEXT_CHUNK_TBL.jmeta,'{}')::json as next_chunk_json, COALESCE(DOC_TBL.author,'Unknown') as author FROM 
        (SELECT * from semantic_hnsw_nolang(query_language_vector, num_chunks_to_return,collectin_id, variadic query_files)) as MAIN
        LEFT OUTER JOIN
        langchain_pg_embedding as PREVIOUS_CHUNK_TBL
        ON MAIN.langchain_pg_embedding_doc_id = PREVIOUS_CHUNK_TBL.doc_id
        AND MAIN.chunk_num-1 = PREVIOUS_CHUNK_TBL.chunk_num
        LEFT OUTER JOIN
        langchain_pg_embedding as NEXT_CHUNK_TBL
        ON MAIN.langchain_pg_embedding_doc_id = NEXT_CHUNK_TBL.doc_id
        AND MAIN.chunk_num+1 = NEXT_CHUNK_TBL.chunk_num
        INNER JOIN
        langchain_pg_document as DOC_TBL
        ON MAIN.langchain_pg_embedding_doc_id = DOC_TBL.id;
        end if;
    end first_block 
                                
                
    $BODY$;""")


    op.execute("""DROP FUNCTION IF EXISTS public.semantic_otherlangs(character varying, vector, integer, uuid, integer[]);""")
    op.execute("""CREATE OR REPLACE FUNCTION public.semantic_otherlangs(
    exclude_language character varying,
    query_language_vector vector,
    num_chunks_to_return integer,
    collectin_id integer,
    VARIADIC query_files integer[])
        RETURNS TABLE(langchain_pg_embedding_embedding vector, langchain_pg_embedding_document character varying, langchain_pg_embedding_cmetadata json, langchain_pg_embedding_page character varying, langchain_pg_embedding_uuid uuid, langchain_pg_embedding_doc_id integer, langchain_pg_embedding_lang character varying, chunk_num integer, chunk_len_in_chars integer, document_summary character varying, document_name character varying, distance double precision, encrypted character varying) 
        LANGUAGE 'plpgsql'
        COST 100
        VOLATILE PARALLEL UNSAFE
        ROWS 1000

    AS $BODY$
                                                                                                    
    <<first_block>>
    declare
        doc_count integer := 0;
        hnsw_threshold constant integer := 70000;
    begin
        raise notice 'Inside otherlangs';
        select count(*) 
        into doc_count
        from public.langchain_pg_embedding e
        join public.langchain_pg_document d
        on e.doc_id = d.id
        where d.collection_id = collectin_id
        and e.doc_id = ANY (query_files)
        and e.lang <> exclude_language;
        
        raise notice 'The number of document is %', doc_count;
        
        if doc_count<hnsw_threshold then
            RETURN QUERY SELECT * from semantic_nohnsw_otherlangs(exclude_language,query_language_vector, num_chunks_to_return,collectin_id, variadic query_files);
        else
            RETURN QUERY SELECT * from semantic_hnsw_otherlangs(exclude_language, query_language_vector, num_chunks_to_return,collectin_id, variadic query_files);
        end if;
    end first_block 

                
    $BODY$;""")


    op.execute("""DROP FUNCTION IF EXISTS public.semantic_singlelang(character varying, vector, integer, uuid, integer[]);""")
    op.execute("""CREATE OR REPLACE FUNCTION public.semantic_singlelang(
    search_language character varying,
    query_language_vector vector,
    num_chunks_to_return integer,
    collectin_id integer,
    VARIADIC query_files integer[])
        RETURNS TABLE(langchain_pg_embedding_embedding vector, langchain_pg_embedding_document character varying, langchain_pg_embedding_cmetadata json, langchain_pg_embedding_page character varying, langchain_pg_embedding_uuid uuid, langchain_pg_embedding_doc_id integer, langchain_pg_embedding_lang character varying, chunk_num integer, chunk_len_in_chars integer, document_summary character varying, document_name character varying, distance double precision, encrypted character varying) 
        LANGUAGE 'plpgsql'
        COST 100
        VOLATILE PARALLEL UNSAFE
        ROWS 1000

    AS $BODY$
                                                                                                    
    <<first_block>>
    declare
        doc_count integer := 0;
        hnsw_threshold constant integer := 70000;
    begin
        raise notice 'Inside singlelang';
        select count(*) 
        into doc_count
        from public.langchain_pg_embedding e
        join public.langchain_pg_document d
        on e.doc_id = d.id
        where d.collection_id = collectin_id
        and e.doc_id = ANY (query_files)
        and e.lang = search_language;
        raise notice 'The number of document is %', doc_count;
        
        if doc_count<hnsw_threshold then
            RETURN QUERY SELECT * from semantic_nohnsw_singlelang(search_language,query_language_vector, num_chunks_to_return, collectin_id, variadic query_files);
        else
            RETURN QUERY SELECT * from semantic_hnsw_singlelang(search_language, query_language_vector, num_chunks_to_return, collectin_id, variadic query_files);
        end if;
    end first_block 
                                
                
    $BODY$;""")

    op.execute("""DROP FUNCTION IF EXISTS public.adv_search_semantic_hnsw_nolang(vector, integer, uuid, integer[]);""")
    op.execute("""CREATE OR REPLACE FUNCTION public.adv_search_semantic_hnsw_nolang(
    query_language_vector vector,
    num_chunks_to_return integer,
    collectin_id integer,
    VARIADIC query_files integer[])
        RETURNS TABLE(langchain_pg_embedding_document character varying, langchain_pg_embedding_cmetadata json, langchain_pg_embedding_page character varying, langchain_pg_embedding_doc_id integer, langchain_pg_embedding_lang character varying, distance double precision, encrypted character varying) 
        LANGUAGE 'plpgsql'
        COST 100
        VOLATILE PARALLEL UNSAFE
        ROWS 1000

    AS $BODY$
                                                                                                    
    <<first_block>>
    declare
    begin
    raise notice 'Inside approximate adv search nolang';

    RETURN QUERY SELECT distinct on (D.ID)
        E.DOCUMENT AS LANGCHAIN_PG_EMBEDDING_DOCUMENT,
        E.JMETA AS LANGCHAIN_PG_EMBEDDING_CMETADATA,
        E.PAGE AS LANGCHAIN_PG_EMBEDDING_PAGE,
        D.ID AS LANGCHAIN_PG_EMBEDDING_DOC_ID,
        E.LANG AS LANGCHAIN_PG_EMBEDDING_LANG,
        E.EMBEDDING_HNSW <=> query_language_vector as distance,
        D.ENCRYPTED
        FROM
        LANGCHAIN_PG_EMBEDDING E
        JOIN LANGCHAIN_PG_DOCUMENT D ON E.DOC_ID = D.ID
        AND D.ID = ANY (query_files)
        AND D.COLLECTION_ID = collectin_id 
    ORDER BY
    D.ID, E.EMBEDDING_HNSW <=> query_language_vector
    LIMIT num_chunks_to_return;
    end first_block 
    $BODY$;""")


    op.execute("""DROP FUNCTION IF EXISTS public.adv_search_semantic_nohnsw_nolang(vector, integer, uuid, integer[]);""")

    op.execute("""CREATE OR REPLACE FUNCTION public.adv_search_semantic_nohnsw_nolang(
    query_language_vector vector,
    num_chunks_to_return integer,
    collectin_id integer,
    VARIADIC query_files integer[])
        RETURNS TABLE(langchain_pg_embedding_document character varying, langchain_pg_embedding_cmetadata json, langchain_pg_embedding_page character varying, langchain_pg_embedding_doc_id integer, langchain_pg_embedding_lang character varying, distance double precision, encrypted character varying) 
        LANGUAGE 'plpgsql'
        COST 100
        VOLATILE PARALLEL UNSAFE
        ROWS 1000

    AS $BODY$
                                                                                                    
    <<first_block>>
    declare
    begin
    raise notice 'Inside exact adv search nolang';

    RETURN QUERY SELECT distinct on (D.ID)
        E.DOCUMENT AS LANGCHAIN_PG_EMBEDDING_DOCUMENT,
        E.JMETA AS LANGCHAIN_PG_EMBEDDING_CMETADATA,
        E.PAGE AS LANGCHAIN_PG_EMBEDDING_PAGE,
        D.ID AS LANGCHAIN_PG_EMBEDDING_DOC_ID,
        E.LANG AS LANGCHAIN_PG_EMBEDDING_LANG,
        E.EMBEDDING <=> query_language_vector as distance,
        D.ENCRYPTED
        FROM
        LANGCHAIN_PG_EMBEDDING E
        JOIN LANGCHAIN_PG_DOCUMENT D ON E.DOC_ID = D.ID
        AND D.ID = ANY (query_files)
        AND D.COLLECTION_ID = collectin_id 
    ORDER BY
    D.ID, E.EMBEDDING <=> query_language_vector
    LIMIT num_chunks_to_return;
    end first_block 
    $BODY$;""")


    op.execute("""DROP FUNCTION IF EXISTS public.adv_search_semantic_nolang(vector, integer, uuid, integer[]);""")
    op.execute("""CREATE OR REPLACE FUNCTION public.adv_search_semantic_nolang(
    query_language_vector vector,
    num_chunks_to_return integer,
    collectin_id integer,
    VARIADIC query_files integer[])
        RETURNS TABLE(langchain_pg_embedding_document character varying, langchain_pg_embedding_cmetadata json, langchain_pg_embedding_page character varying, langchain_pg_embedding_doc_id integer, langchain_pg_embedding_lang character varying, distance double precision, encrypted character varying) 
        LANGUAGE 'plpgsql'
        COST 100
        VOLATILE PARALLEL UNSAFE
        ROWS 1000

    AS $BODY$
                                                                                                    
    <<first_block>>
    declare
    doc_count integer := 0;
    hnsw_threshold constant integer := 70000;
    begin
    raise notice 'Inside adv search nolang';

    select count(d.id) 
    into doc_count
    from public.langchain_pg_embedding e
    join public.langchain_pg_document d
    on e.doc_id = d.id
    and d.id = ANY (query_files)
    and d.collection_id = collectin_id
    ;
    
    raise notice 'The number of document is %', doc_count;

    if doc_count<hnsw_threshold then
        RETURN QUERY SELECT fn.langchain_pg_embedding_document,fn.langchain_pg_embedding_cmetadata,fn.langchain_pg_embedding_page,fn.langchain_pg_embedding_doc_id,fn.langchain_pg_embedding_lang,fn.distance,fn.encrypted FROM adv_search_semantic_nohnsw_nolang(query_language_vector, num_chunks_to_return, collectin_id, variadic query_files) as fn;
    else
        RETURN QUERY SELECT fn.langchain_pg_embedding_document,fn.langchain_pg_embedding_cmetadata,fn.langchain_pg_embedding_page,fn.langchain_pg_embedding_doc_id,fn.langchain_pg_embedding_lang,fn.distance,fn.encrypted FROM adv_search_semantic_hnsw_nolang(query_language_vector, num_chunks_to_return, collectin_id, variadic query_files) as fn;
    end if; 
    end first_block 
    $BODY$;""")
    op.execute("""CREATE SCHEMA if not exists partman;""")

    op.execute("""CREATE EXTENSION IF NOT EXISTS PG_PARTMAN SCHEMA partman;
    -- CREATE ROLE partman_user WITH LOGIN;
    -- ALTER ROLE partman_user WITH PASSWORD 'postgres';
    -- GRANT ALL ON SCHEMA partman TO partman_user;
    -- GRANT ALL ON ALL TABLES IN SCHEMA partman TO partman_user;
    -- GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA partman TO partman_user;
    -- GRANT EXECUTE ON ALL PROCEDURES IN SCHEMA partman TO partman_user;
    -- GRANT ALL ON SCHEMA "public" TO partman_user;
    -- GRANT TEMPORARY ON DATABASE "empowergpt_devtest_jazib" to partman_user;""")

    op.execute("""ALTER TABLE IF EXISTS langchain_pg_embedding RENAME TO langchain_pg_embedding_old;""")
    op.execute("""CREATE TABLE public.langchain_pg_embedding (like langchain_pg_embedding_old)
    PARTITION BY RANGE (collection_id);""")

    op.execute("""ALTER TABLE IF EXISTS langchain_pg_document RENAME TO langchain_pg_document_old;""")
    op.execute("""CREATE TABLE public.langchain_pg_document (like langchain_pg_document_old)
    PARTITION BY RANGE (collection_id);""")


    op.execute("""ALTER TABLE public.langchain_pg_embedding alter column collection_id set not null;""")
    op.execute("""ALTER TABLE public.langchain_pg_document alter column collection_id set not null;""")


    op.execute("""SELECT partman.create_parent(
    p_parent_table := 'public.langchain_pg_embedding',
    p_control := 'collection_id',
    p_interval := '1',    
    p_start_partition := '1',
    p_inherit_fk:=false,
    p_type := 'native'
    );""")
    op.execute("""SELECT partman.create_parent(
    p_parent_table := 'public.langchain_pg_document',
    p_control := 'collection_id',
    p_start_partition := '1',
    p_interval := '1',
    p_inherit_fk:=false,
    p_type := 'native'
    );""")



    op.execute("""WITH MIGDATA AS (
               DELETE FROM langchain_pg_document_old d
               returning d.*)
               insert into langchain_pg_document table MIGDATA;""")

    op.execute("""WITH MIGDATA AS (
               DELETE FROM langchain_pg_embedding_old d
               returning d.*)
               insert into langchain_pg_embedding table MIGDATA;""")

    op.execute("""ALTER TABLE IF EXISTS public.LANGCHAIN_PG_COLLECTION
        ADD CONSTRAINT langchain_pg_collection_pkey PRIMARY KEY (COLLECTION_ID);""")
    op.execute("""ALTER TABLE IF EXISTS public.langchain_pg_document
        ADD CONSTRAINT langchain_pg_document_collection_id_fkey 
    FOREIGN KEY (COLLECTION_ID) 
    REFERENCES LANGCHAIN_PG_COLLECTION (COLLECTION_ID) 
    ON DELETE CASCADE;""")
    op.execute("""ALTER TABLE IF EXISTS public.langchain_pg_web
        ADD CONSTRAINT langchain_pg_web_collection_id_fkey 
    FOREIGN KEY (COLLECTION_ID) 
    REFERENCES LANGCHAIN_PG_COLLECTION (COLLECTION_ID) 
    ON DELETE CASCADE;""")
    op.execute("""ALTER TABLE IF EXISTS public.langchain_pg_document
        ADD CONSTRAINT langchain_pg_document_pkey PRIMARY KEY (COLLECTION_ID, ID);""")

    op.execute("""ALTER TABLE IF EXISTS public.langchain_pg_embedding
        ADD CONSTRAINT langchain_pg_embedding_collection_id_doc_id_fkey 
    FOREIGN KEY (COLLECTION_ID, DOC_ID) 
    REFERENCES langchain_pg_document (COLLECTION_ID, ID) 
    ON DELETE CASCADE;""")

    op.execute("""ALTER TABLE IF EXISTS public.langchain_pg_embedding
        ADD CONSTRAINT langchain_pg_embedding_pkey PRIMARY KEY (COLLECTION_ID, uuid);""")


    op.execute("""CREATE INDEX IF NOT EXISTS idx_adv_srch_kwvector_fts
        ON public.langchain_pg_embedding USING gin
        (adv_search_ts_vector);""")

    op.execute("""CREATE INDEX IF NOT EXISTS idx_chat_kwvector_fts
        ON public.langchain_pg_embedding USING gin
        (keywords_ts_vector);""")

    op.execute("""CREATE INDEX IF NOT EXISTS idx_composite_docid_lang
        ON public.langchain_pg_embedding USING btree
        (COLLECTION_ID,doc_id);""")

    op.execute("""CREATE INDEX IF NOT EXISTS idx_hnsw
        ON public.langchain_pg_embedding USING hnsw
        (embedding_hnsw vector_cosine_ops) with (m = 16, ef_construction = 128);""")
    op.execute("""DROP TABLE IF EXISTS public.langchain_pg_document_old;""")

    op.execute("""DROP TABLE IF EXISTS public.langchain_pg_embedding_old;""")

    # ### end Alembic commands ###




def downgrade() -> None:
    pass
